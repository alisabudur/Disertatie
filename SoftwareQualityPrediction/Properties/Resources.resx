<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActivationFunctionCaption" xml:space="preserve">
    <value>Activation Function</value>
  </data>
  <data name="AddCaption" xml:space="preserve">
    <value>Add &gt;&gt;</value>
  </data>
  <data name="BipolarSigmoidCaption" xml:space="preserve">
    <value>Bipolar Sigmoid</value>
  </data>
  <data name="BrowseCaption" xml:space="preserve">
    <value>Browse</value>
  </data>
  <data name="CrossValidationParameterCaption" xml:space="preserve">
    <value>Cross-Validation K Parameter</value>
  </data>
  <data name="FieldIsRequiredValidationMessage" xml:space="preserve">
    <value>{0} field is required</value>
    <comment>{0} - the name of the field</comment>
  </data>
  <data name="HiddenLayersCaption" xml:space="preserve">
    <value>Hidden Layers</value>
  </data>
  <data name="HiddenLayersDescription" xml:space="preserve">
    <value>Specifies the amount of neurons in each hidden layer. Each value represents the amount of neurons in a single hidden layer. Values are separated by ";". Enter as many values as many hidden layers you want. Example: 10;3;4 is a specification for 3 hidden layers, with 10 neurons on the first hidden layer, 3 on the second and 4 on the third.</value>
  </data>
  <data name="IdColumnCaption" xml:space="preserve">
    <value>ID Column</value>
  </data>
  <data name="InvalidHiddenLayersFormatValidationMessage" xml:space="preserve">
    <value>Invalid hidden layers format</value>
  </data>
  <data name="LearningRateCaption" xml:space="preserve">
    <value>Learning Rate</value>
  </data>
  <data name="LearningRateValidationMessage" xml:space="preserve">
    <value>Learning Rate must be a positive real number</value>
  </data>
  <data name="PathNoExistValidationMessage" xml:space="preserve">
    <value>Path does not exist</value>
  </data>
  <data name="LocationToSaveCaption" xml:space="preserve">
    <value>Location </value>
  </data>
  <data name="MenuCaption" xml:space="preserve">
    <value>Menu</value>
  </data>
  <data name="MinErrorValidationMessage" xml:space="preserve">
    <value>Minimum Error must be a positive real number</value>
  </data>
  <data name="MinimumErrorCaption" xml:space="preserve">
    <value>Minimum Error</value>
  </data>
  <data name="NeuralNetworkNameCaption" xml:space="preserve">
    <value>Neural Network Name</value>
  </data>
  <data name="NextCaption" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="NoEpochsValidationMessage" xml:space="preserve">
    <value>Number Of Epochs must be a positive number greater than 0</value>
  </data>
  <data name="NumberOfEpochsCaption" xml:space="preserve">
    <value>Number Of Epochs</value>
  </data>
  <data name="RemoveCaption" xml:space="preserve">
    <value>&lt;&lt; Remove</value>
  </data>
  <data name="SaveSettingsCaption" xml:space="preserve">
    <value>Save settings</value>
  </data>
  <data name="SelectAnnParametersCaption" xml:space="preserve">
    <value>Select Neural Network Parameters</value>
  </data>
  <data name="NoItemSelectedValidationMessage" xml:space="preserve">
    <value>No item selected for {0}</value>
    <comment>{0} - input/output variables</comment>
  </data>
  <data name="SelectHiddenLayersCaption" xml:space="preserve">
    <value>Select Hidden Layers</value>
  </data>
  <data name="SelectInputVariablesCaption" xml:space="preserve">
    <value>Select Input Variables</value>
  </data>
  <data name="SelectOutputVariablesCaption" xml:space="preserve">
    <value>Select Output Variables</value>
  </data>
  <data name="SelectTerminationConditionCaption" xml:space="preserve">
    <value>Select Termination Condition</value>
  </data>
  <data name="SelectTrainingDataFileCaption" xml:space="preserve">
    <value>Select Training Data File</value>
  </data>
  <data name="SelectValidationParametersCaption" xml:space="preserve">
    <value>Select Validation Parameters</value>
  </data>
  <data name="SheetCaption" xml:space="preserve">
    <value>Sheet</value>
  </data>
  <data name="SigmoidCaption" xml:space="preserve">
    <value>Sigmoid</value>
  </data>
  <data name="StartTrainingCaption" xml:space="preserve">
    <value>Start Training</value>
  </data>
  <data name="TestingCaption" xml:space="preserve">
    <value>Testing</value>
  </data>
  <data name="TrainingCompletedMessage" xml:space="preserve">
    <value>Neural network successfuly trained!</value>
  </data>
  <data name="TrainingDataCaption" xml:space="preserve">
    <value>Training Data</value>
  </data>
  <data name="TrainingParametersCaption" xml:space="preserve">
    <value>Training Parameters</value>
  </data>
  <data name="TrainingResultCaption" xml:space="preserve">
    <value>Training Result</value>
  </data>
  <data name="UploadFileCaption" xml:space="preserve">
    <value>Upload File</value>
  </data>
  <data name="InputVariablesCaption" xml:space="preserve">
    <value>Input Variables</value>
  </data>
  <data name="OutputVariablesCaption" xml:space="preserve">
    <value>Output Variables</value>
  </data>
  <data name="FileFieldCaption" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="SelectTestingDataFileCaption" xml:space="preserve">
    <value>Select Testing Data File</value>
  </data>
  <data name="GoToTestingCaption" xml:space="preserve">
    <value>Go To Testing</value>
  </data>
  <data name="StartTestingCaption" xml:space="preserve">
    <value>Start Testing</value>
  </data>
  <data name="SelectNNForTestingCaption" xml:space="preserve">
    <value>Select The Neural Network</value>
  </data>
  <data name="NeuralNetworkPathCaption" xml:space="preserve">
    <value>Neural Network Path</value>
  </data>
  <data name="ShouldBeExactlyValidationMessage" xml:space="preserve">
    <value>Should be exaclty {0} items selected</value>
    <comment>{0} - number of items that should be selected</comment>
  </data>
  <data name="TestingCompletedCaption" xml:space="preserve">
    <value>Testing completed! Results are in the uploaded file.</value>
  </data>
  <data name="SelectVariablesCaption" xml:space="preserve">
    <value>You must upload a file that contains the following input valiables: {0}.</value>
    <comment>{0} - input variables</comment>
  </data>
  <data name="SelectOutputColumnsCaption" xml:space="preserve">
    <value>Select Output Columns</value>
  </data>
  <data name="OutputColumnsCaption" xml:space="preserve">
    <value>Output Columns</value>
  </data>
  <data name="ColumnsToBeSelectedCaption" xml:space="preserve">
    <value>The selected document must contain the following columns: {0}.</value>
    <comment>{0} - columns stored in Excel file. {1} - output columns. </comment>
  </data>
</root>